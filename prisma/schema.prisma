// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Booking {
    id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    scheduleId  String   @db.Uuid
    bookerEmail String
    bookerName  String
    startTime   DateTime @db.Timestamptz
    endTime     DateTime @db.Timestamptz
    status      String   @default("pending")
    createdAt   DateTime @default(now()) @db.Timestamptz
    schedule    Schedule @relation(fields: [scheduleId], references: [id])

    @@map("bookings")
}

model CalendarInfo {
    id           String    @id @db.Uuid
    calendarName String?
    createdAt    DateTime  @default(now()) @db.Timestamptz
    updatedAt    DateTime  @default(now()) @db.Timestamptz
    user         User      @relation(fields: [id], references: [id])
    Profile      Profile[]

    @@map("calendar_info")
}

model CalendarToken {
    id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    userId       String   @unique @db.Uuid
    accessToken  String
    refreshToken String
    expiryDate   BigInt
    createdAt    DateTime @default(now()) @db.Timestamptz
    updatedAt    DateTime @default(now()) @db.Timestamptz
    user         User     @relation(fields: [userId], references: [id])

    @@map("calendar_tokens")
}

model Profile {
    id                String        @id @db.Uuid
    email             String        @unique
    name              String?
    description       String?
    profilePictureUrl String?
    createdAt         DateTime      @default(now()) @db.Timestamptz
    updatedAt         DateTime      @default(now()) @db.Timestamptz
    username          String?       @unique
    user              User          @relation(fields: [id], references: [id])
    schedule          Schedule?     @relation(fields: [scheduleId], references: [id])
    calendarInfo      CalendarInfo? @relation(fields: [calendarInfoId], references: [id])
    scheduleId        String?       @db.Uuid
    calendarInfoId    String?       @db.Uuid

    @@map("profiles")
}

model Schedule {
    id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    weeklyAvailability Json
    timeZone           String
    meetingDuration    BigInt
    meetingPrice       Decimal
    currency           String
    userId             String    @unique @db.Uuid
    createdAt          DateTime  @default(now()) @db.Timestamptz
    user               User      @relation(fields: [userId], references: [id])
    bookings           Booking[]
    Profile            Profile[]

    @@map("schedules")
}

model User {
    id            String         @id @db.Uuid
    profile       Profile?
    schedule      Schedule?
    calendarInfo  CalendarInfo?
    calendarToken CalendarToken?

    @@map("users")
}
